Resources:
  ImageBuilderLogBucket:
    Type: AWS::S3::Bucket

  InstanceRole:
    Type: AWS::IAM::Role
    Metadata:
      Comment: Role to be used by instance during image build.
    Properties:
      ManagedPolicyArns:
        - Fn::Sub: arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilder
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: '2012-10-17'
      Path: /executionServiceEC2Role/

  InstanceRoleLoggingPolicy:
    Type: AWS::IAM::Policy
    Metadata:
      Comment: Allows the instance to save log files to an S3 bucket.
    Properties:
      PolicyName: ImageBuilderLogBucketPolicy
      Roles:
        - Ref: InstanceRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - s3:PutObject
            Effect: Allow
            Resource:
              - Fn::Sub:
                  - arn:aws:s3:::${BUCKET}/*
                  - BUCKET:
                      Ref: ImageBuilderLogBucket

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /executionServiceEC2Role/
      Roles:
        - Ref: InstanceRole

  AmazonLinux2ImageInfrastructureConfiguration:
    Type: AWS::ImageBuilder::InfrastructureConfiguration
    Properties:
      Name: Amazon-Linux-2-for-scraping-Infrastructure-Configuration
      InstanceProfileName:
        Ref: InstanceProfile
      Logging:
        S3Logs:
          S3BucketName:
            Ref: ImageBuilderLogBucket

  AmazonLinux2LogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: /aws/imagebuilder/Amazon-Linux-2-for-scraping
      RetentionInDays: 3

  AmazonLinux2ImageRecipe:
    Type: AWS::ImageBuilder::ImageRecipe
    Properties:
      Name: Amazon-Linux-2-for-scraping
      Version: 0.0.1
      ParentImage:
        Fn::Sub: arn:aws:imagebuilder:${AWS::Region}:aws:image/amazon-linux-2-x86/x.x.x
      Components:
        - ComponentArn:
            Fn::Sub: arn:aws:imagebuilder:${AWS::Region}:aws:component/update-linux/x.x.x
      AdditionalInstanceConfiguration:
        UserDataOverride:
          Fn::Base64:
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws configure set aws_access_key_id $YOUR_ACCESS_KEY_ID --profile matheus-thiago-tcc
            aws configure set aws_secret_access_key $YOUR_SECRET_ACCESS_KEY --profile matheus-thiago-tcc
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
            export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")" [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install 12
            sudo yum update -y
            sudo yum install git -y
            git clone https://PradoTPS:${ssm:github-personal-token}@github.com/PradoTPS/aws-scraper-cost-optimization.git
            cd aws-scraper-cost-optimization
            rm package-lock.json
            npm install -g serverless
            npm i
            # export CHROME_PATH
            sls invoke local -f ConsumeQueue -p tests/events/consumeQueue.json

  AmazonLinux2ForScraping:
    Type: AWS::ImageBuilder::Image
    Properties:
      ImageRecipeArn:
        Ref: AmazonLinux2ImageRecipe
      InfrastructureConfigurationArn:
        Ref: AmazonLinux2ImageInfrastructureConfiguration

  AmazonLinux2ForScrapingParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Image Id for Amazon Linux 2 for scraping
      Name: /test/images/AmazonLinux2-ForScraping
      Type: String
      Value:
        Fn::GetAtt: [AmazonLinux2ForScraping, ImageId]